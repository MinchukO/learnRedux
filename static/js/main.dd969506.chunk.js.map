{"version":3,"sources":["store/amount.js","store/goods.js","store/position.js","store/index.js","App.js","index.js"],"names":["ADD","TAKE","CLEAR","LEFT","RIGHT","UP","DOWN","actions","left","type","right","up","down","circle","delay","dispatch","Promise","resolve","setTimeout","getY","position","y","startPosition","x","getPosition","state","reducer","combineReducers","amount","action","value","console","log","goods","good","filter","store","createStore","applyMiddleware","thunk","App","useDispatch","useSelector","coords","distance","truckStyle","transform","className","onClick","positionActions","style","ReactDOM","render","document","getElementById"],"mappings":"gNACMA,EAAM,aACNC,EAAO,cACPC,EAAQ,e,QCHRF,EAAM,YACNC,EAAO,aACPC,EAAQ,c,OCDRC,EAAO,OACPC,EAAQ,QACRC,EAAK,KACLC,EAAO,OAEAC,EAAU,CACrBC,KAAM,iBAAO,CACXC,KAAMN,IAERO,MAAO,iBAAO,CACZD,KAAML,IAERO,GAAI,iBAAO,CACTF,KAAMJ,IAERO,KAAM,iBAAO,CACXH,KAAMH,IAMRO,OAjBqB,SAiBdC,GACL,OAAO,SAACC,GACN,OAAO,IAAIC,SAAQ,SAAAC,GACjBF,EAASR,EAAQG,SAEjBQ,YAAW,WACTH,EAASR,EAAQK,UAChBE,GAEHI,YAAW,WACTH,EAASR,EAAQC,UACR,EAARM,GAEHI,YAAW,WACTH,EAASR,EAAQI,MACjBM,MACS,EAARH,SASEK,EAAO,SAAAC,GAAQ,OAAIA,EAASC,GAEnCC,EAAgB,CAAEC,EAAG,EAAGF,EAAG,GClC1B,SAASG,EAAYC,GAC1B,MAAO,CACLF,GD6BgBH,EC7BRK,EAAML,SD6BcA,EAASG,GC5BrCF,EAAGF,EAAKM,EAAML,WD4BE,IAAAA,ECNpB,IAAMM,EAAUC,YAAgB,CAC9BC,OHpB2B,WAAyB,IAAxBA,EAAuB,uDAAd,EAAGC,EAAW,uCACnD,OAAQA,EAAOpB,MACb,KAAKT,EACH,OAAO4B,EAASC,EAAOC,MACzB,KAAK7B,EACH,OAAI4B,EAAOC,MAAQF,GACjBG,QAAQC,IAAI,iJACLJ,GAEFA,EAASC,EAAOC,MACzB,KAAK5B,EACH,OAAO,EACT,QACE,OAAO0B,IGQXK,MFzB0B,WAAyB,IAAxBA,EAAuB,uDAAf,GAAIJ,EAAW,uCAClD,OAAQA,EAAOpB,MACb,KAAKT,EACH,MAAM,GAAN,mBAAWiC,GAAX,CAAkBJ,EAAOK,OAC3B,KAAKjC,EAEH,OAAOgC,EAAME,QAAO,SAAAD,GAAI,OAAIA,IAASL,EAAOK,QAC9C,KAAKhC,EACH,MAAO,GACT,QACE,OAAO+B,IEgBXb,SDU6B,WAAuC,IAAtCA,EAAqC,uDAA1BE,EAAeO,EAAW,uCACnE,OAAQA,EAAOpB,MACb,KAAKN,EACH,OAAO,2BACFiB,GADL,IAEEG,EAAGH,EAASG,EAAI,IAEpB,KAAKnB,EACH,OAAO,2BACFgB,GADL,IAEEG,EAAGH,EAASG,EAAI,IAEpB,KAAKlB,EACH,OAAO,2BACFe,GADL,IAEEC,EAAGD,EAASC,EAAI,IAEpB,KAAKf,EACH,OAAO,2BACFc,GADL,IAEEC,EAAGD,EAASC,EAAI,IAEpB,QACE,OAAOD,MCTEgB,EArBDC,YAAYX,EAASY,YAAgBC,M,eCUpCC,MAnDf,WACE,IAAMzB,EAAW0B,cACjB,EAAiBC,YAAYlB,GAArBD,EAAR,EAAQA,EAAGF,EAAX,EAAWA,EAULsB,EAAM,UAAMpB,EAAN,YAAWF,GACjBuB,EAAWrB,EAAIF,EAGfwB,EAAa,CACjBC,UAAU,aAAD,OAFE,GAEavB,EAAf,eAFE,GAE4BF,EAA9B,QAGX,OACE,kCACE,gCACE,qBAAK0B,UAAU,QAAf,SACE,wBAAQC,QApBD,kBAAMjC,EAASkC,EAAgBtC,OAoBtC,iBAGF,sBAAKoC,UAAU,QAAf,UACE,wBAAQC,QAvBC,kBAAMjC,EAASkC,EAAgBzC,SAuBxC,SAA4B,MAC3BmC,EACD,wBAAQK,QAxBE,kBAAMjC,EAASkC,EAAgBvC,UAwBzC,SAA6B,SAG/B,qBAAKqC,UAAU,QAAf,SACE,wBAAQC,QA3BC,kBAAMjC,EAASkC,EAAgBrC,SA2BxC,iBAGF,qBAAKmC,UAAU,QAAf,SACE,wBAAQC,QA9BD,WACbjC,EAASkC,EAAgBpC,OAAO,OA6B1B,sBAGF,qBAAKkC,UAAU,YAAf,SACE,qBAAKA,UAAU,QAAQG,MAAOL,EAA9B,SACGD,YCzCbO,IAASC,OACP,cAAC,IAAD,CAAUhB,MAAOA,EAAjB,SACG,cAAC,EAAD,MAEHiB,SAASC,eAAe,W","file":"static/js/main.dd969506.chunk.js","sourcesContent":["//Лучше добавить префиксы что б не было в итоге конфликтов между разными редюсерами с одинаковыми actions\nconst ADD = 'amount/add';\nconst TAKE = \"amount/take\";\nconst CLEAR = \"amount/clear\";\n\n//прописываем методы\nexport const actions = {\n  add: (value) => ({\n    type: ADD,\n    value,\n  }),\n  take: (value) => ({\n    type: TAKE,\n    value,\n  }),\n  clear: () => ({\n    type: CLEAR,\n  }),\n};\n\n//Все изменения amount только через amountReducer\n//принимает amount как начальное значение\nexport const amountReducer = (amount = 0, action) => {\n  switch (action.type) {\n    case ADD:\n      return amount + action.value;\n    case TAKE:\n      if (action.value > amount) {\n        console.log(\"слишком много хочешь снять\");\n        return amount;\n      }\n      return amount - action.value;\n    case CLEAR:\n      return 0;\n    default:\n      return amount;\n  }\n};\n\n//Функция должна быть pure для одних и тех же входящих данных (amount, action) возвращает один и тот же результат т.е не зависит от внешних переменных и внутри не использует случайные значения и мы не можем внутри функции менять внешние переменные, использовать обработчик событий, назначить таймер, отправить запрос на сервер...\n\n//Её запуск предсказуем и не повлияет на другую чать программы","const ADD = \"goods/add\";\nconst TAKE = \"goods/take\";\nconst CLEAR = \"goods/clear\";\n\nexport const actions = {\n  add: (good) => ({\n    type: ADD,\n    good,\n  }),\n  take: (good) => ({\n    type: TAKE,\n    good,\n  }),\n  clear: () => ({\n    type: CLEAR,\n  }),\n};\n\nexport const goodsReducer = (goods = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [...goods, action.good];\n    case TAKE:\n      // оставляем в массиве те, для которых условие true т.е убираем те, которые выбрали\n      return goods.filter(good => good !== action.good);\n    case CLEAR:\n      return [];\n    default:\n      return goods;\n  }\n}","\nconst LEFT = \"left\";\nconst RIGHT = \"right\";\nconst UP = \"up\";\nconst DOWN = \"down\";\n\nexport const actions = {\n  left: () => ({\n    type: LEFT,\n  }),\n  right: () => ({\n    type: RIGHT,\n  }),\n  up: () => ({\n    type: UP,\n  }),\n  down: () => ({\n    type: DOWN,\n  }),\n\n  //action может быть и функцией(thunk), всегда принимает dispatch\n  //выполняет actions асинхроно\n  // возвращаем promise что б внешний код понял когда закончилось последнее действие и подписался на результат\n  circle(delay) {\n    return (dispatch) => {\n      return new Promise(resolve => {\n        dispatch(actions.right());\n\n        setTimeout(() => {\n          dispatch(actions.down());\n        }, delay);\n\n        setTimeout(() => {\n          dispatch(actions.left());\n        }, delay * 2);\n\n        setTimeout(() => {\n          dispatch(actions.up());\n          resolve();\n        }, delay * 3);\n      });\n    };\n  },\n};\n\n\n//что бы внешний код не зависил от названий ключа объекта\nexport const getX = position => position.x;\nexport const getY = position => position.y;\n\nconst startPosition = { x: 0, y: 0 };\n\n\n//если бы я возвращала position, а не новый массив, то я бы мутировала массив и не увидела промежуточные изменения\nexport const positionReducer = (position = startPosition, action) => {\n  switch (action.type) {\n    case LEFT:\n      return {\n        ...position,\n        x: position.x - 1,\n      };\n    case RIGHT:\n      return {\n        ...position,\n        x: position.x + 1,\n      };\n    case UP:\n      return {\n        ...position,\n        y: position.y - 1,\n      };\n    case DOWN:\n      return {\n        ...position,\n        y: position.y + 1,\n      };\n    default:\n      return position;\n  }\n};","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\nimport { amountReducer, actions as amountActions} from './amount';\nimport { goodsReducer, actions as goodsAction } from './goods';\nimport {\n  positionReducer,\n  actions as positionAction,\n  getX,\n  getY} from \"./position\";\n\n//Селектор\nexport function getAmount(state) {\n  return state.amount\n}\n\n//Селектор составной - это функция умеет выбирать нужную часть sate'a\nexport function getPosition(state) {\n  return {\n    x: getX(state.position),\n    y: getY(state.position)\n  };\n}\n\nexport function getDistanceTo(state, point) {\n  const { x, y } = getPosition(state)\n  return Math.abs(x - point.x) + Math.abs(y - point.y);\n}\n\n// возвращает true/false\nexport function hasEnoughMoney(state, payment) {\n  return getAmount(state) >= payment\n}\n\n//createStore(initialState, reducer)\n//const initialState = {\n//  amount: 0,\n//  goods: [],\n//  position: {x: 0, y: 0},\n//}\n\n//служебный метод combineReducers\nconst reducer = combineReducers({\n  amount: amountReducer,\n  goods: goodsReducer,\n  position: positionReducer,\n});\n \nconst store = createStore(reducer, applyMiddleware(thunk));\n\n\n// или если начинаем с 0 => const store = createStore(amountReducer);\n//const store = createStore(100, amountReducer);\n//const store2 = createStore(goodsReducer);\n//const position = createStore(positionReducer)\n\n\n//у нашего store есть методы diapatch, subscribe, getState\n  //store.dispatch(amountActions.add(100));\n  //store.dispatch(amountActions.take(60));\n  //store.dispatch(amountActions.add(5));\n\n  //store.dispatch(goodsAction.add(\"Apple\"));\n\n  //store.subscribe(() => {\n  //  console.log(store.getState());\n  //});\n\n\nexport default store;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport store, { getPosition } from \"./store\";\nimport { actions as positionActions} from './store/position'\nimport './App.css';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const { x, y } = useSelector(getPosition);\n\n  const moveUp = () => dispatch(positionActions.up());\n  const moveLeft = () => dispatch(positionActions.left());\n  const moveRight = () => dispatch(positionActions.right());\n  const moveDown = () => dispatch(positionActions.down());\n  const rotate = () => {\n    dispatch(positionActions.circle(500));\n  };\n\n  const coords = `${x}:${y}`;\n  const distance = x + y;\n\n  const step = 20;\n  const truckStyle = {\n    transform: `translate(${x * step}px, ${y * step}px)`,\n  };\n\n  return (\n    <section>\n      <div>\n        <div className=\"group\">\n          <button onClick={moveUp}>^</button>\n        </div>\n\n        <div className=\"group\">\n          <button onClick={moveLeft}>{\"<\"}</button>\n          {coords}\n          <button onClick={moveRight}>{\">\"}</button>\n        </div>\n\n        <div className=\"group\">\n          <button onClick={moveDown}>v</button>\n        </div>\n\n        <div className=\"group\">\n          <button onClick={rotate}>Rotate</button>\n        </div>\n\n        <div className=\"warehouse\">\n          <div className=\"truck\" style={truckStyle}>\n            {distance}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport store from './store'\n\n\nReactDOM.render(\n  <Provider store={store}>\n     <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}